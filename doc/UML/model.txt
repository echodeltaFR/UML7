@startuml

enum Visibility {
    - String symbol
    - String name
    PRIVATE
    PROTECTED
    PUBLIC
    PACKAGE
    --
    + String toString()
    --
    + Visibility(String symbol)
}

enum Modifier {
    -name : String
    FINAL
    STATIC
    ABSTRACT
    VOLATILE
    TRANSIENT
    SYNCHRONIZED
    --
    + toString() : String
    --
    + Modifier(String name)
}

class UmlDiagram {
    - String titre
    - List<UmlRefType> elements
    - List<UmlRelationship> relations
    --
    + getTitre()
    + setTitre(String titre)
    --
    + UmlDiagram(String title, List<UmlRefType> elements, List<UmlRelationship> relations)
}

interface UmlType {
    --
    + String getTypeName()
    --
}

class UmlParams {
    - UmlType type
    - String name
    --
    + UmlType getType()
    + void setType()
    + String getName()
    + void setName()
    --
    + UmlParams(UmlType type, String name)
    
}

enum PrimitiveType {
    -name : String
    INT
    DOUBLE
    FLOAT
    BYTE
    CHAR
    STRING
    SHORT
    LONG
    BOOLEAN
    --
    + String toString()
    + String getTypeName()
    --
    + PrimitiveType(String name)
}


Abstract class UmlEntity {
    - Visibility visibility
    - Set<Modifier> modifiers
    --
    + void addModifier(Modifier modifier)
    + void clearModifiers()
    + void removeModifier(Modifier modifier)
    + Visibility getVisibility()
    + void setVisibility(Visibility visibility)
    + Set<Modifier> getModifiers()
    + void setModifiers(Set<Modifier> modifiers)
    # void setChangedAndNotify()
    --
    + UmlEntity()
    + UmlEntity(Visibility visibility)
    + UmlEntity(Set<Modifier> modifiers)
    + UmlEntity(Visibility visibility, Set<Modifier> modifier)
}

class UmlClass {
    --
    void accept(DiagramElementVisitor visitor)
    --
    + UmlClass(String name)
    + UmlClass(String name, List<UmlMethod> methods)
    + UmlClass(String name, List<UmlMethod> methods, List<UmlAttribute> attributes)
    + UmlClass(String name, List<UmlMethod> methods, List<UmlAttribute> attributes, Visibility visibility, Set<Modifier> modifiers)
}

class UmlMethod {
    - Set<UmlParams> params
    - UmlType returnType
    - String name
    --
    + void addParam(UmlParams param)
    + void addParams(Set<UmlParams> params)
    + void removeParam(UmlParams param)
    + void removeParams(Set<UmlParams> params)
    + UmlType getReturnType()
    + String getName()
    + Set<UmlParams> getParams()
    + void setName(String name)
    + void setReturnType(UmlType returnType)
    --
    + UmlMethod(String name)
    + UmlMethod(String name, Set<UmlParams> params, UmlType returnType, Visibility visibility, Set<Modifier> modifiers)
}

class UmlAttribute {
    - String name
    - UmlType type
    --
    + String getName()
    + UmlType getType()
    + void setName(String attrName)
    + void setType(UmlType attrType)
    --
    + UmlAttribute(String attrName, UmlType attrType)
    + UmlAttribute(String attrName, UmlType attrType, Visibility attrVisi, Set<Modifier> attrModifs)
}


class UmlEnum {
    - List<String> valuesList
    --
    + List<String> getValuesList()
    + void setValuesList(List<String> valuesList)
    + void addValue(String value)
    + void removeValue(String value)
    + void accept(DiagramElementVisitor visitor)
    --
    + UmlEnum(String name) 
    + UmlEnum(String name, List<String> values)
    + UmlEnum(String name, List<String> values, List<UmlMethod> methods)
    + UmlEnum(String name, List<String> values, List<UmlMethod> methods, List<UmlAttribute> attributes)
}

class UmlInterface {
    --
    + void addAttribute(UmlAttribute attribute)
    + void addMethod(UmlMethod method)
    + void setAttributesList(List<UmlAttribute> attributesList)
    + void setMethodsList(List<UmlMethod> methodsList)
    - Boolean check(List<UmlMethod> methods, List<UmlAttribute> attributes, Visibility visibility, Modifier modifier, Set<Modifier> modifiers, UmlAttribute attribute, UmlMethod method)
    + void accept(DiagramElementVisitor visitor)
    --
    + UmlInterface(String name)
    + UmlInterface(String name, List<UmlMethod> methods)
    + UmlInterface(String name, List<UmlMethod> methods, List<UmlAttribute> attributes)
    + UmlInterface(String name, List<UmlMethod> methods, List<UmlAttribute> attributes, Visibility visibility, Set<Modifier> modifiers)
}

Abstract class UmlRefType {
    - String name
    - List<UmlMethod> methodsList
    - List<UmlAttribute> attributesList
    --
    + String getName()
    + void setName(String name)
    + List<UmlMethod> getMethodsList()
    + void setMethodsList(List<UmlMethod> methodsList)
    + List<UmlAttribute> getAttributesList()
    + void setAttributesList(List<UmlAttribute> attributesList)
    + void addMethod(UmlMethod method)
    + void addAttribute(UmlAttribute attribute)
    + void removeMethod(UmlMethod method)
    + void removeAttribute(UmlAttribute attribute)
    + String getTypeName()
    + {abstract} void accept(DiagramElementVisitor visitor)
    --
    + UmlRefType(String name)
    + UmlRefType(String name, List<UmlMethod> methods)
    + UmlRefType(String name, List<UmlMethod> methods, List<UmlAttribute> attributes)
    + UmlRefType(String name, List<UmlMethod> methods, List<UmlAttribute> attributes, Visibility visibility, Set<Modifier> modifiers)
}

Abstract class UmlRelationship {
    - UmlClass classA
    - UmlClass classB
    - String roleA
    - String roleB
    - String relationName
    --
    + String getRoleA()
    + void setRoleA(String roleA)
    + String getRoleB()
    + void setRoleB(String roleB)
    + UmlClass getClassA()
    + UmlClass getClassB()
    + String getRelationName()
    + void setRelationName(String relationName)
    --
    # UmlRelationship(UmlClass elementA, UmlClass elementB)
}

class UmlAggregationLink
class UmlAssociationLink
class UmlCompositionLink
class UmlExtendLink
class UmlInterface

/' UmlDiagram "1" *- "*" UmlElement
UmlDiagram "1" *- "*" UmlRelationship
UmlRelationship "*" o-- "2..*" UmlElement

UmlElement <|.. UmlLabeled_Element
UmlLabeled_Element <|-- UmlEntity


UmlComponent <|-- UmlClass
UmlComponent <|-- UmlInterface
UmlComponent <|-- UmlEnum

UmlEntity <|-- UmlComponent

UmlEntity <|-- UmlMethod
UmlEntity <|-- UmlAttribute

UmlLabeled_Element <|-- UmlPackage
UmlLabeled_Element "*" <- "1" UmlPackage

UmlEntity  -> "visibility" Visibility
Modifier "modifier" <- UmlEntity

UmlType "1" *-- "*" UmlMethod
UmlType "1" *-- "*" UmlAttribute
UmlParams "*" *-- "1" UmlType
UmlMethod "*" *-- "*" UmlParams
 

UmlHierachyLink -[hidden]-> UmlUsageLink

UmlRelationship <|. UmlHierachyLink
UmlRelationship <|. UmlUsageLink
UmlType <|. UmlComponent
UmlType <|. PrimitiveType

UmlHierachyLink -> Relationship_Type
UmlUsageLink -> Relationship_Type '/

@enduml
