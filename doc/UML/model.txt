@startuml

enum Visibility {
    __ Attributes __
    -symbol : String
    PRIVATE
    PROTECTED
    PUBLIC
    __ Method __
    +toString() : String
    __ Constructor __
    +Visibility(String symbol)
}

enum Modifier {
    __ Attributes __
    -name : String
    FINAL
    STATIC
    ABSTRACT
    VOLATILE
    TRANSIENT
    SYNCHRONIZED
    __ Methods __
    +toString() : String
    __ Constructor __
    Modifier(String name)
}

class UmlDiagram {
    -String titre
    +getTitre()
    +setTitre(String titre)
}

interface UmlElement {
}

interface UmlType {
}

class UmlParams {
    __ Attributes __
    -type : UmlType
    -name : String
    __ Methods __
    +getType() : UmlType
    +setType() : void
    +getName() : String
    +setName() : void
    __ Constructors __
    +UmlParams(UmlType type, String name)
    
}

enum PrimitiveType {
    __ Attributes __
    -name : String
    INT
    DOUBLE
    FLOAT
    BYTE
    CHAR
    STRING
    SHORT
    LONG
    BOOLEAN
    __ Method __
    +toString() : String
    __ Constructor __
    PrimitiveType(String name)
}


Abstract class UmlEntity {
    __ Attributes __
    -visibility : Visibility
    -modifiers : Set<Modifier>
    __ Methods __
    +addModifier(Modifier modifier) : void
    +clearModifiers() : void
    +removeModifier(Modifier modifier) : void
    +getVisibility() : Visibility
    +setVisibility(Visibility visibility) : void
    +getModifier() : Set<Modifier>
    +setModifiers(Set<Modifier> modifiers) : void
    __ Constructor __
    +UmlEntity()
    +UmlEntity(Visibility visibility)
    +UmlEntity(Visibility visibility, Set<Modifier> modifier)
    
}

Abstract class UmlLabeled_Element {
    -String label
    +getLabel()
    +setLabel(String label)
}

class UmlClass {
    __ Constructor __
    +UmlClass(String name)
    +UmlClass(String name, List<UmlMethod> methods)
    +UmlClass(String name, List<UmlMethod> methods, List<UmlAttribute> attributes)
}

class UmlMethod {
    __ Attributes __
    -params : ArrayList<UmlParams>
    -returnType : UmlType
    -name : String
    __ Methods __
    +addAllParams(List<UmlParams> params) : void
    +addParams(UmlParams params) : void
    +setReturnType(UmlType returnType) : UmlType
    +removeReturnType() : void
    +getReturnType() : UmlType
    +getName() : String
    +getParams() : List<UmlParams>
    +removeParams(UmlParams params) : void
    +removeAllParams(List<String> params) : void
    __ Constructors __
    +UmlMethod(List<UmlParams> params, UmlType returnType, String name, Visibility visibility, Set<Modifier> modifier)
}

class UmlAttribute {
    __ Attributes __
    -type : UmlType
    -name : String
    __ Methods __
    +getType() : UmlType
    +toString() : String
    __ Contsructors__
    +UmlAttribute(String attrName, UmlType attrType)
}


class UmlEnum {
    __ Attributes __
    -valuesList : List<String>
    __ Methods __
    +addValue(String value) : void
    +removeValue(String value) : void
    __ Constructors __
    +UmlEnum(String name) 
    +UmlEnum(String name, List<String> values)
    +UmlEnum(String name, List<String> values, List<UmlMethod> methods)
    +UmlEnum(String name, List<String> values, List<UmlMethod> methods, List<UmlAttribute> attributes)
}

class UmlPackage {
    
}

class UmlInterface {
    +UmlInterface(String name)
    +UmlInterface(String name, List<UmlMethod> methods)
    +UmlInterface(String name, List<UmlMethod> methods, List<UmlAttribute> attributes)
}

Abstract class UmlComponent {
    __ Attributes __
    -name ï¼š String
    -methodsListz : List<UmlMethod>
    -attributesList : List<UmlAttribute>
    __ Methods __
    +getName() : String
    +setName(String name) : void
    +getMethodsList() : List<UmlMethod>
    +setMethodsList(List<UmlMethod> methodsList) : void
    +getAttributesList() : List<UmlAttribute>
    +setAttributesList(List<UmlAttribute> attributesList) : void
    +addMethod(UmlMethod method) : void
    +addAttribute(UmlAttribute attribute) : void
    +removeMethod(UmlMethod method) : void
    +removeAttribute(UmlAttribute attribute) void
    __ Constructors __
    +UmlComponent(String name)
    +UmlComponent(String name, List<UmlMethod> methods)
    +UmlComponent(String name, List<UmlMethod> methods, List<UmlAttribute> attributes)
}


Abstract class UmlRelationship {
    __Attributes__
    -classA : UmlClass
    -classB : UmlClass
    -roleA : String
    -roleB : String
    -relationName : String
    __Methods__
    +setRoleA(String roleA) : void
    +getRoleA() : String
    +setRoleB(String roleB) : void
    +getRoleB() : String
    +getClassA() : UmlClass
    +getClassB() : UmlClass
    +getRelationName() : String
    +setRelationName(String relationName ) : void
    
    __Constructors__
    #UmlRelationShip(UmlClass elementA, UmlClass elementB)
}

Enum Relationship_Type{
    AGGREGATION
    COMPOSITION
    IMPLEMENTS
    EXTENDS
    USE
    DEPENDS
}

UmlDiagram "1" *- "*" UmlElement
UmlDiagram "1" *- "*" UmlRelationship
UmlRelationship "*" o-- "2..*" UmlElement

UmlElement <|.. UmlLabeled_Element
UmlLabeled_Element <|-- UmlEntity


UmlComponent <|-- UmlClass
UmlComponent <|-- UmlInterface
UmlComponent <|-- UmlEnum

UmlEntity <|-- UmlComponent

UmlEntity <|-- UmlMethod
UmlEntity <|-- UmlAttribute

UmlLabeled_Element <|-- UmlPackage
UmlLabeled_Element "*" <- "1" UmlPackage

UmlEntity  -> "visibility" Visibility
Modifier "modifier" <- UmlEntity

UmlType "1" *-- "*" UmlMethod
UmlType "1" *-- "*" UmlAttribute
UmlParams "*" *-- "1" UmlType
UmlMethod "*" *-- "*" UmlParams
 

UmlHierachyLink -[hidden]-> UmlUsageLink

UmlRelationship <|. UmlHierachyLink
UmlRelationship <|. UmlUsageLink
UmlType <|. UmlComponent
UmlType <|. PrimitiveType

UmlHierachyLink -> Relationship_Type
UmlUsageLink -> Relationship_Type

@enduml
